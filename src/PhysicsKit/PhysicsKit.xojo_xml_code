<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2020r1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="874911743">
 <ObjName>PhysicsKit</ObjName>
 <ObjContainerID>856788991</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Initialise</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>271996927</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Initialise()</SourceLine>
   <SourceLine>// Initialises the physics module including shared properties within classes.</SourceLine>
   <SourceLine>// We could avoid initialise methods on these classes by making the shared properties </SourceLine>
   <SourceLine>// static but that would require us to use computed shared properties which I suspect are </SourceLine>
   <SourceLine>// slower than regular properties.</SourceLine>
   <SourceLine>PKAbstractShape.Initialise</SourceLine>
   <SourceLine>PKEllipse.Initialise</SourceLine>
   <SourceLine>PKHalfEllipse.Initialise</SourceLine>
   <SourceLine>PKRobustGeometry.Initialise</SourceLine>
   <SourceLine>PKTransform.Initialise</SourceLine>
   <SourceLine>PKVector2.Initialise</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ToString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>821759999</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToString(Extends mt As PhysicsKit.MassTypes) As String</SourceLine>
   <SourceLine>Select Case mt</SourceLine>
   <SourceLine>Case PhysicsKit.MassTypes.FixedAngularVelocity</SourceLine>
   <SourceLine>Return "Fixed Angular Velocity"</SourceLine>
   <SourceLine>Case PhysicsKit.MassTypes.FixedLinearVelocity</SourceLine>
   <SourceLine>Return "Fixed Linear Velocity"</SourceLine>
   <SourceLine>Case PhysicsKit.MassTypes.Infinite</SourceLine>
   <SourceLine>Return "Infinite"</SourceLine>
   <SourceLine>Case PhysicsKit.MassTypes.Normal</SourceLine>
   <SourceLine>Return "Normal"</SourceLine>
   <SourceLine>Case Else</SourceLine>
   <SourceLine>Return "Unknown mass type"</SourceLine>
   <SourceLine>End Select</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends mt As PhysicsKit.MassTypes</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>HashCode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Computes the hash code for the given Double.</CodeDescription>
  <PartID>1966764031</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HashCode(Extends d As Double) As Integer</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Computes the hash code for the given Double.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter Extends d: The double to get the hash code for.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var temp As Variant = MathsKit.DoubleToBits(d)</SourceLine>
   <SourceLine>Return temp Xor MathsKit.RShiftU64(temp, 32)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends d As Double</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>AddAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Appends the elements in `array2` to the end of `array1` in the order they appear in `array2`.</CodeDescription>
  <PartID>2031968255</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddAll(Extends array1() As PKVector2, array2() As PKVector2)</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Appends the elements in `array2` to the end of `array1` in the order they appear in `array2`.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter Extends array1(): The array to append to.</SourceLine>
   <SourceLine>' - Parameter array2(): An array containing elements to be appended to `array1`.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' Mutates `array1` but does not modify `array2`.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each v As PKVector2 In array2</SourceLine>
   <SourceLine>array1.AddRow(v)</SourceLine>
   <SourceLine>Next v</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends array1() As PKVector2, array2() As PKVector2</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SubList</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns a new array comprising the elements in `original` between the specified (inclusive) `fromIndex` and (exclusive) `toIndex`.</CodeDescription>
  <PartID>1477908479</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SubList(Extends original() As PKVector2, fromIndex As Integer, toIndex As Integer) As PKVector2()</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns a new array comprising the elements in `original` between the specified </SourceLine>
   <SourceLine>' (inclusive) `fromIndex` and (exclusive) `toIndex`.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter Extends original(): The donating original array.</SourceLine>
   <SourceLine>' - Parameter fromIndex: low (inclusive) endpoint of the subList.</SourceLine>
   <SourceLine>' - Parameter toIndex: high (exclusive) endpoint of the subList.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Raises: OutOfBoundsException if an index value is out of range (fromIndex &lt; 0 or toIndex &gt; Count).</SourceLine>
   <SourceLine>' - Raises: InvalidArgumentException if the indices are out of order (fromIndex &gt; toIndex).</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' If `fromIndex = toIndex`, the returned array is empty.</SourceLine>
   <SourceLine>' The Java implementation of this method ensures that the returned list (array) is backed by </SourceLine>
   <SourceLine>' this list (array), so non-structural changes in the returned list are reflected in the</SourceLine>
   <SourceLine>' original array, and vice-versa. This is **not** possible with Xojo.</SourceLine>
   <SourceLine>' Returns a new array and does not alter the original array.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma Warning "NOTE: Non-identical re-implementation of this Java method"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var result() As PKVector2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Return an empty array if the indices are equal.</SourceLine>
   <SourceLine>If fromIndex = toIndex Then Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Validate indices.</SourceLine>
   <SourceLine>If fromIndex &lt; 0 Or toIndex &gt; original.Count Then</SourceLine>
   <SourceLine>Raise New OutOfBoundsException("Invalid index in PKVector2.SubList")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If fromIndex &gt; toIndex Then</SourceLine>
   <SourceLine>Raise New InvalidArgumentException("`fromIndex` must be smaller or equal to `toIndex`")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Create the array to return.</SourceLine>
   <SourceLine>Var limit As Integer = toIndex - 1</SourceLine>
   <SourceLine>For i As Integer = fromIndex To limit</SourceLine>
   <SourceLine>result.AddRow(original(i))</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends original() As PKVector2, fromIndex As Integer, toIndex As Integer</ItemParams>
  <ItemResult>PKVector2()</ItemResult>
 </Method>
 <Method>
  <ItemName>Remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Removes the specified face from this array of PKDoubleEdgeListFaces (if present). Returns True if successful or False if not present in the array.</CodeDescription>
  <PartID>675332095</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Remove(Extends delf() As PKDoubleEdgeListFace, face As PKDoubleEdgeListFace) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Removes the specified face from this array of PKDoubleEdgeListFaces (if present). Returns True if</SourceLine>
   <SourceLine>' successful or False if not present in the array.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter Extends delf(): The array to remove from.</SourceLine>
   <SourceLine>' - Parameter face: The face to remove.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: True if removed or False if not present.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var index As Integer = delf.IndexOf(face)</SourceLine>
   <SourceLine>If index = -1 Then</SourceLine>
   <SourceLine>// Not in the array.</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>delf.RemoveRowAt(index)</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends delf() As PKDoubleEdgeListFace, face As PKDoubleEdgeListFace</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Note>
  <ItemName>MassTypes Enumeration</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>485435391</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>MassTypes Enumeration</NoteLine>
   <NoteLine>An enumeration for special Mass types.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Normal:</NoteLine>
   <NoteLine>Indicates a normal mass.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Infinite:</NoteLine>
   <NoteLine>Indicates that the mass is infinite (rate of rotation and translation should not change)</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>FixedAngularVelocity:</NoteLine>
   <NoteLine>Indicates that the mass's rate of rotation should not change.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>FixedLinearVelocity:</NoteLine>
   <NoteLine>Indicates that the mass's rate of translation should not change.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Enumeration>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>MassTypes</ItemName>
  <ItemFlags>1</ItemFlags>
  <ItemType>Integer</ItemType>
  <ItemName>MassTypes</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>648882175</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Normal</SourceLine>
   <SourceLine>Infinite</SourceLine>
   <SourceLine>FixedAngularVelocity</SourceLine>
   <SourceLine>FixedLinearVelocity</SourceLine>
  </ItemSource>
 </Enumeration>
</block>
</RBProject>
