<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2020r1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="966422527">
 <ObjName>PKTypeFilter</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>PKFilter</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>IsAllowed</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1932220415</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsAllowed(filter As PKFilter) As Boolean</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>' Returns True under the following conditions:</SourceLine>
   <SourceLine>' - If this filter is the same type as the given filter.</SourceLine>
   <SourceLine>' - If this filter type is a descendant of the given filter's type.</SourceLine>
   <SourceLine>' - If the given filter's type is a descendant of this filter's type.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' If the given filter is not of type PKTypeFilter then False is returned.</SourceLine>
   <SourceLine>' If the given filter is Nil then False is returned.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Parameter filter: The other filter.</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Returns: RETURN_DESCRIPTION</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>' - Notes:</SourceLine>
   <SourceLine>' Part of the PKFilter interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// If it's Nil then just return.</SourceLine>
   <SourceLine>If filter Is Nil Then Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Check for the same instance.</SourceLine>
   <SourceLine>If Self Is filter Then Return True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Make sure the given filter is a PKTypeFilter.</SourceLine>
   <SourceLine>If filter IsA PKTypeFilter Then</SourceLine>
   <SourceLine>// `filter` should never be a PKTypeFilter instance as it is intended to be abstract.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var selfTI As Introspection.TypeInfo = Introspection.GetType(Self)</SourceLine>
   <SourceLine>Var filterTI As Introspection.TypeInfo = Introspection.GetType(filter)</SourceLine>
   <SourceLine>// Check the types of </SourceLine>
   <SourceLine>If selfTI.IsSubclassOf(filterTI) Or filterTI.IsSubclassOf(selfTI) Then</SourceLine>
   <SourceLine>// If they are the same type then return True.</SourceLine>
   <SourceLine>// If the given filter is a descendant type of this filter type then return True.</SourceLine>
   <SourceLine>// If this type is a descendant of the given filter's type then return True.</SourceLine>
   <SourceLine>Return True </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Otherwise return False.</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>filter As PKFilter</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ToString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>745783295</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToString() As String</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>'- Note: Part of the PKFilter interface.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var s() As String</SourceLine>
   <SourceLine>s.AddRow("TypeFilter[ClassName=")</SourceLine>
   <SourceLine>s.AddRow(Introspection.GetType(Self).FullName)</SourceLine>
   <SourceLine>s.AddRow("]")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return String.FromArray(s)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1782669311</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>A base implementation of a class hierarchy fixture filter.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>This class is not used directly but instead extended by marker classes (see example below).</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>This filter is designed to allow a **hierarchy** of categories where each category</NoteLine>
   <NoteLine>can collide with it's parents and it's descendants, but not it's siblings.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>For example, imagine we have the following hierarchy of categories:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>             Root Category</NoteLine>
   <NoteLine>             /           \</NoteLine>
   <NoteLine>        Category1     Category2</NoteLine>
   <NoteLine>        /      \</NoteLine>
   <NoteLine> Category 3  Category 4</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>This hierarchy allows the following:</NoteLine>
   <NoteLine> - A fixture with the Root category can collide with anything.</NoteLine>
   <NoteLine> - A fixture with the Category1 category can collide with the Category1, Category3, Category4, </NoteLine>
   <NoteLine>   and Root categories. (i.e. not Category2)</NoteLine>
   <NoteLine> - A fixture with the Category2 category can collide with the Category2 and Root categories only.</NoteLine>
   <NoteLine> - A fixture with the Category3 category can collide with the Category3, Category1, and Root categories.</NoteLine>
   <NoteLine> -A fixture with the Category4 category can collide with the Category4, Category1, and Root categories.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>To implement this you create a class for each category:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>```xojo</NoteLine>
   <NoteLine>Class Root Inherits PKTypeFilter</NoteLine>
   <NoteLine>End Class</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Class Category1 Inherits Root</NoteLine>
   <NoteLine>End Class</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Class Category2 Inherits Root</NoteLine>
   <NoteLine>End Class</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Class Category3 Inherits Category1</NoteLine>
   <NoteLine>End Class</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Class Category4 Inheritss Category1</NoteLine>
   <NoteLine>End Class</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Class Categories</NoteLine>
   <NoteLine>  Public Static ROOT As TypeFilter = New Root</NoteLine>
   <NoteLine>  Public Static CATEGORY1 As PKTypeFilter = New Category1</NoteLine>
   <NoteLine>  Public Static CATEGORY2 As PKTypeFilter = New Category2</NoteLine>
   <NoteLine>  Public Static CATEGORY3 As PKTypeFilter = New Category3</NoteLine>
   <NoteLine>  Public Static CATEGORY4 As PKTypeFilter = New Category4</NoteLine>
   <NoteLine>Class</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>// Then set the filter on the fixtures.</NoteLine>
   <NoteLine>fixture.SetFilter(Categories.ROOT)</NoteLine>
   <NoteLine>// Or</NoteLine>
   <NoteLine>fixture.SetFilter(Categories.CATEGORY1)</NoteLine>
   <NoteLine>```</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
